#!/usr/bin/env sh
set -eo pipefail

# This is the directory where all the recipes and ingredients are stored.
# By default, it is an empty string.
# If you want to use a different path, then override the default value with
# and absolute path name pointing to a direnv.d/ directory
DIRENVD_DIR=""


# @FUNCTION: project
# @USAGE: project <name>
#
# @DESCRIPTION:
# This function expands the supplied <name> to the environment variable PROJECT.
# If <name> is a Go's import path, then <name> is automatically expanded to the
# environment variable VANITY, which will hold the vanity import path of the
# project.
#
# Example:
#    $ cat ~/my/project/.envrc
#    project darkstar
#
#    $ direnv allow ~/my/project/.envrc
#    direnv: loading ~/.direnvrc
#    direnv: loading .envrc
#    direnv: export +PROJECT
#
#    $ env | grep PROJECT
#    PROJECT=darkstar
#
# Example (Golang import path)
#    $ cat ~/my/project/.envrc
#    project github.com/wonderboy/darkstar
#
#    $ direnv allow ~/my/project/.envrc
#    direnv: loading ~/.direnvrc
#    direnv: loading .envrc
#    direnv: export +PROJECT +VANITY
#
#    $ env | grep PROJECT
#    PROJECT=darkstar
#
#    $ env | grep VANITY
#    VANITY=github.com/wonderboy/darkstar
function project() {
	local name="${1:-isempty}"

	# Exit if the project name is empty
	if [[ "isempty" == ${name##*/} ]]; then
		log_error "You must supply a valid project name when invoking project()!"
		exit 1
	fi

	# Export PROJECT
	export PROJECT="${name##*/}"

	# Export VANITY (only if different from PROJECT)
	#[[ ${PROJECT} == ${name} ]] && return
	export VANITY="${name}"
}


# @FUNCTION: concoct
# @USAGE: concoct <recipe>
#
# @DESCRIPTION:
# This function loads the supplied <recipe>.
function concoct() {

	# Determine the location of the direnv.d directory
	if [[ -z ${DIRENVD_DIR} ]]; then
		local direnvrc="$HOME/.direnvrc"
		if [[ ! -L ${direnvrc} ]]; then
			log_error "${direnvrc} is not a symbolic link!"
			log_error "this Direnv recipe has not been installed by 'bestow'."
			log_error "sorry, I cannot continue. Please, ask upstream for feedbacks:"
			log_error "-  https://github.com/Dr-Terrible/dotfiles-direnv"
			exit 1
		fi

		DIRENVD_DIR="$( readlink ${direnvrc} )"
		DIRENVD_DIR="$( dirname ${DIRENVD_DIR} )/direnv.d"
	fi

	local cmd="${1}"

	# Exit if the recipe name is empty
	if [[ -z $( echo ${cmd} ) ]]; then
		log_error "You must supply a valid recipe name when invoking concoct()!"
		exit 1
	fi

	local recipe="${DIRENVD_DIR}/recipes/${1}.direnv"

	# Load the required recipe from direnv.d directory
	if [[ ! -r ${recipe} ]]; then
		log_error "Unable to find recipe: ${cmd}!"
		exit 1
	fi

	log_status "checking ${cmd}"
	source ${recipe}
}

# @FUNCTION: require
# @USAGE: require <food container> <ingredient>
#
# @DESCRIPTION:
# This function loads an <ingredient> from a specific <food container>. If the
# <food container>, or the <ingredient>, doesn't exist, the function returns
# an error. This helper function is supposed to be used by recipes only.
#
# NOTE: Works like Direnv's use() function, except that the required external
# dependencies must be installed to allow Direnv to complete the set up of
# the environment.
function require() {
	local container="${1:-empty}"
	local cmd="${2:-empty}"
	local ingredient="${DIRENVD_DIR}/ingredients/${container}/${cmd}.direnv"

	# Load the required ingredient from direnv.d directory
	if [[ ! -r ${ingredient} ]]; then
		log_error "Unable to find ingredient: ${cmd}!"
		log_error "No such file or directory: ${ingredient}"
		exit 1
	fi
	source "${ingredient}"

	# Detect the presence of the specified command
	if ! has ${cmd}; then
		log_error "Unable to find command: ${cmd}!"
		exit 1
	fi

	shift
	shift
	local DIRENV_LOG_FORMAT="   ---> %s"
	usepkg ${cmd} "$@"
}

# Usage: log_status_nonewline [<message> ...]
#
# Logs a status message without the trailing newline char.
# Acts like echo, but wraps output in the standard direnv log format
# (controlled by $DIRENV_LOG_FORMAT), and directs it to stderr
# rather than stdout.
#
# Example:
#
#    log_status_nonewline "Loading ..."
#
function log_status_nonewline() {
	if [[ -n $DIRENV_LOG_FORMAT ]]; then
		local msg=$*
		# shellcheck disable=SC2059
		printf "${DIRENV_LOG_FORMAT}" "$msg" >&2
	fi
}

# Usage: usepkg <program_name> [<version>]
#
# A semantic command dispatch intended for loading external dependencies into
# the environment.
#
# Example:
#
#    use_go() {
#      local version="$( go version | cut -d ' ' -f 3 )"
#      printf "${version//go/v}\n"
#    }
#    usepkg go
#    # output: go v1.9
#
function usepkg() {
	local cmd=$1
	log_status_nonewline "found $* "
	shift
	"use_$cmd" "$@"
	printf "\n"
}


# @FUNCTION:
# @USAGE: make_dir <directory> ... <directotyN>
#
# @DESCRIPTION:
# This helper function creates the given directories,
# if they do not already exist.
function make_dir() {
	for dir in $@; do
		[[ -d ${dir} ]] && continue
		mkdir -p ${dir}
		printf "   >>>> created: ${dir//${PWD}\//}/ \n"
	done
}

# @FUNCTION:
# @USAGE: make_tmpfs <directory>
#
# @DESCRIPTION:
# This helper function creates a temporary directory that won't clash with other
# running envrc processes, and avoids race conditions if possible.
function make_tmpfs() {
	for dir in $@; do
		[[ -d ${dir} ]] && continue
		# TODO: find a way to execute the mount without requiring root privileges.
		#       possibly, try to use systemd services for mounting points.
		#       for now we use symlinks to /tmp
		#mount -t tmpfs none ${dir} -o 'rw,nosuid,nodev,noexec,noauto,nouser,owner,lazytime,async'

		# Make sure $PROJECT exists
		if [ -z "${PROJECT}" ]; then
			log_error "Environment variable \$PROJECT is missing"
			return -1
		fi

		# Make sure mktemp is available.
		if ! command -pv mktemp >/dev/null ; then
			log_error "Command 'mktemp' not found"
			return -1
		fi

		# Make sure /tmp is writeable.
		# TODO: /tmp is not cross-platform, and TMPDIR is a bashisms (overwritten
		#       by os-project); we should rely on something else.
		if [ ! -w "/tmp" ]; then
			log_error "/tmp is not writeable"
			return -1
		fi

		# Create the directory which will contain the template for mktemp.
		local template="envrc-${USER}"
		mkdir -p "/tmp/${template}"

		# Create the temporary directory and symlink it into the local project.
		local tempdir=$( mktemp --suffix="-${dir//${PWD}\//}" -d "/tmp/${template}/${PROJECT}-XXXXXXXX" )
		ln -sf "${tempdir}" "${dir//${PWD}\//}"
		printf "   >>>> mounted ${dir//${PWD}\//} -> ${tempdir} \n"
	done
}


# @FUNCTION: include
# @INTERNAL
# @DEPRECATED
# This helper function will be removed soon; don't use it.
function include() {
	if [[ -d ${1} ]]; then
		for file in $( find ${1} -depth -mindepth 1 -type f -iname "*.direnv" ); do
			source "${file}"
		done
	fi
}
