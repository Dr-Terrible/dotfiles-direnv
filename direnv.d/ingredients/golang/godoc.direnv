# @FUNCTION: use_godoc
# @INTERNAL
# @DESCRIPTION:
#
# NOTE: in case $GOPATH is holding multiple pathnames, use ${GOPATH%%:*} to
#       retrieve just the first entry (which should be the actual GOPATH).
use_godoc() {
	printf "\n"

	# GOPATH must not be empty
	if [ -z "${GOPATH}" ]; then
		log_error "Environment variable \$GOPATH is missing"
		exit 1
	fi

	# If a godoc session is already running, print its HTTP address
	# systemctl --user is-active godoc\@$( echo $GOPATH | tr / - )
	if [ -e "${GOPATH%%:*}/.godoc" ]; then
		printf "   >>>> godoc already running at: 127.0.0.1:$( get_port )\n"
		print_browser_info
		return
	fi

	# Start a new session
	printf "   >>>> running godoc session at "
	systemctl --user daemon-reload
	systemctl --user start godoc@${GOPATH%%:*}
	while [[ ! -r "${GOPATH%%:*}/.godoc" ]] ; do
		if command -pv sleep >/dev/null 2>&1; then
			sleep 0.5s
			printf "."
		fi
	done
	printf " 127.0.0.1:$( get_port )\n"
	print_browser_info
}

function print_browser_info() {
	# If there is no browser set up, then exit
	[ -z "${BROWSER}" ] && return

	local msg

	case "${BROWSER}" in
	google-*)
		msg="$BROWSER --user-data-dir=\"${TMPDIR-:/tmp}/browser\" --app=http://127.0.0.1:$( get_port )"
		;;
	vimb*)
		msg "$BROWSER -p godoc http://127.0.0.1:$( get_port )"
		;;
	*)
		# Browser is not supported.
		# There is nothing else to do here, aborting.
		return
		;;
	esac

	printf "   >>>> godoc browseable with: ${msg}\n"
}

function get_port() {
	[ ! -e "${GOPATH%%:*}/.godoc" ] && return
	echo "$( cat ${GOPATH%%:*}/.godoc )"
}
